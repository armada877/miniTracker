# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey(surveyId: Int!): Survey
  coordinates(zipcode: Int!): Coordinates
  hike(id: Int!): Hike
  comment(id: Int!): [Comment!]!
  comments: [Comment!]!
  hikes: [Hike!]!
}

type Mutation {
  # Adds a comment to the database
  addComment(input: AddCommentInput!): Boolean!

  # Upvote
  upvoteComment(input: UpvoteInput!): Boolean!

  # Downvote
  downvoteComment(input: DownvoteInput!): Boolean!

  # Adds a hike to the user's favorite list
  addFavorite(input: AddFavoriteInput!): Boolean!

  # Removes a hike from the user's favorite list
  removeFavorite(input: RemoveFavoriteInput!): Boolean!

  # Adds a hike to the database
  addHike(input: AddHikeInput!): Boolean!

  # Records an answer to a survey question presented in class.
  answerSurvey(input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion(surveyId: Int!): Survey
}

type Subscription {
  surveyUpdates(surveyId: Int!): Survey
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
  favorites: [Hike]!
}

enum UserType {
  ADMIN
  USER
}

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type Hike {
  id: Int!
  name: String!
  summary: String!
  stars: Float!
  difficulty: String!
  location: String!
  length: Float!
}

type Comment {
  id: Int!
  text: String!
  name: String!
  date: String!
  likes: Int!
  hike: Hike!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

type Coordinates {
  zipcode: Int!
  lat: Float!
  lon: Float!
}

input AddCommentInput {
  id: Int!
  text: String!
  name: String!
  date: String!
}

input AddHikeInput {
  id: Int!
  name: String!
  summary: String!
  stars: Float!
  difficulty: String!
  location: String!
  length: Float!
}

input AddFavoriteInput {
  hike: AddHikeInput!
}

input RemoveFavoriteInput {
  hike: AddHikeInput!
}

input UpvoteInput {
  id: Int!
  text: String!
  name: String!
  date: String!
}

input DownvoteInput {
  id: Int!
  text: String!
  name: String!
  date: String!
}